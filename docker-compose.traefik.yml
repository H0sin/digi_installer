services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.insecure=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.file.directory=/etc/traefik/dynamic
      - --providers.file.watch=true
      - --log.level=INFO
      - --accesslog=true
      - --certificatesresolvers.le.acme.email=${TRAEFIK_ACME_EMAIL:-admin@example.com}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      - traefik-letsencrypt:/letsencrypt
      - ./certs:/certs:ro
    environment:
      - TRAEFIK_DOMAIN=${TRAEFIK_DOMAIN:-traefik.localhost}
    networks:
      - web
    labels:
      - traefik.enable=true
      # Dashboard router over HTTPS on traefik.${DOMAIN}
      - traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DOMAIN:-traefik.localhost}`)
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=le
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.middlewares=default-security@file

  # Merge-only label blocks for existing services defined in docker-compose.yml
  # Root domain -> webapp (ASP.NET Core)
  webapp:
    labels:
      - traefik.enable=true
      - traefik.http.routers.webapp.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.webapp.entrypoints=websecure
      - traefik.http.routers.webapp.tls=true
      - traefik.http.routers.webapp.tls.certresolver=le
      - traefik.http.routers.webapp.middlewares=default-security@file
      - traefik.http.services.webapp.loadbalancer.server.port=8080

  # React client app -> client subdomain
  client-app:
    labels:
      - traefik.enable=true
      - traefik.http.routers.client.rule=Host(`${CLIENT_APP_DOMAIN}`)
      - traefik.http.routers.client.entrypoints=websecure
      - traefik.http.routers.client.tls=true
      - traefik.http.routers.client.tls.certresolver=le
      - traefik.http.routers.client.middlewares=default-security@file
      - traefik.http.services.client.loadbalancer.server.port=3000

  # RabbitMQ Management UI
  rabbitmq:
    labels:
      - traefik.enable=true
      - traefik.http.routers.rabbit.rule=Host(`${RABBITMQ_DOMAIN}`)
      - traefik.http.routers.rabbit.entrypoints=websecure
      - traefik.http.routers.rabbit.tls=true
      - traefik.http.routers.rabbit.tls.certresolver=le
      - traefik.http.routers.rabbit.middlewares=default-security@file
      - traefik.http.services.rabbit.loadbalancer.server.port=15672

  # pgAdmin
  pgadmin:
    labels:
      - traefik.enable=true
      - traefik.http.routers.pgadmin.rule=Host(`${PGADMIN_DOMAIN}`)
      - traefik.http.routers.pgadmin.entrypoints=websecure
      - traefik.http.routers.pgadmin.tls=true
      - traefik.http.routers.pgadmin.tls.certresolver=le
      - traefik.http.routers.pgadmin.middlewares=default-security@file
      - traefik.http.services.pgadmin.loadbalancer.server.port=80

  # Portainer
  portainer:
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(`${PORTAINER_DOMAIN}`)
      - traefik.http.routers.portainer.entrypoints=websecure
      - traefik.http.routers.portainer.tls=true
      - traefik.http.routers.portainer.tls.certresolver=le
      - traefik.http.routers.portainer.middlewares=default-security@file
      - traefik.http.services.portainer.loadbalancer.server.port=9000

  # RedisInsight
  redisinsight:
    labels:
      - traefik.enable=true
      - traefik.http.routers.redisinsight.rule=Host(`${REDISINSIGHT_DOMAIN}`)
      - traefik.http.routers.redisinsight.entrypoints=websecure
      - traefik.http.routers.redisinsight.tls=true
      - traefik.http.routers.redisinsight.tls.certresolver=le
      - traefik.http.routers.redisinsight.middlewares=default-security@file
      - traefik.http.services.redisinsight.loadbalancer.server.port=5540

  # Disable HAProxy when using this overlay (avoid 80/443 conflicts)
  haproxy:
    profiles: ["disabled"]

volumes:
  traefik-letsencrypt:

networks:
  web:
    # Use the same Compose project network name to attach Traefik
    name: ${COMPOSE_PROJECT_NAME}_web
