services:
  # üåê Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: digi-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./ssl:/etc/ssl/certs
    networks:
      - digi_network
    depends_on:
      - digi-app

  # üöÄ Digi Main Application
  digi-app:
    image: ${DIGI_IMAGE:-ghcr.io/h0sin/digi:latest}
    container_name: digi-app
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379
      - DOMAIN=${DOMAIN}
      - SECRET_KEY=${SECRET_KEY}
    networks:
      - digi_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üêò PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: digi-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - digi_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # üöÄ Redis Cache
  redis:
    image: redis:7-alpine
    container_name: digi-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - ./data/redis:/data
    networks:
      - digi_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

networks:
  digi_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: