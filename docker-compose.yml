services:
  # 🚪 Reverse Proxy (HAProxy)
  haproxy:
    image: haproxy:2.8
    container_name: haproxy
    restart: unless-stopped
    user: root
    environment:
      - DOMAIN=${DOMAIN}
      - RABBITMQ_DOMAIN=${RABBITMQ_DOMAIN}
      - PGADMIN_DOMAIN=${PGADMIN_DOMAIN}
      - PORTAINER_DOMAIN=${PORTAINER_DOMAIN}
      - HAPROXY_STATS_PASS=${HAPROXY_STATS_PASS}
    ports:
      - "80:80"
      - "443:443"
      - "8404:8404"
    volumes:
      - ./haproxy/haproxy.cfg.template:/usr/local/etc/haproxy/haproxy.cfg.template:ro
      - ${CERTS_PATH}:/etc/ssl/private:ro
    networks:
      - web
    depends_on:
      - webapp
      - rabbitmq
      - pgadmin
      - portainer
    command: >
      /bin/sh -c "
        apt-get update && apt-get install -y gettext-base &&
        envsubst < /usr/local/etc/haproxy/haproxy.cfg.template > /tmp/haproxy.cfg && 
        haproxy -f /tmp/haproxy.cfg -db
      "
  
  # ⚛️ React Client App
  client-app:
    image: ${CLIENT_APP_IMAGE}
    container_name: ${COMPOSE_PROJECT_NAME}-client-app
    restart: unless-stopped
    networks:
      - web

  # 🌐 Main ASP.NET Core Web App
  webapp:
    image: ${WEBAPP_IMAGE}
    container_name: ${COMPOSE_PROJECT_NAME}-app
    restart: unless-stopped
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=Production
      - RabbitMq__HOST=rabbitmq
      - RabbitMq__Username=${RABBITMQ_USER}
      - RabbitMq__Password=${RABBITMQ_PASS}
      - DOMAIN=${DOMAIN}
      - CLIENT_APP_DOMAIN=${CLIENT_APP_DOMAIN}
    networks:
      - web
      - internal
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # 🐰 RabbitMQ Broker with UI
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    networks:
      - internal
      - web
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 🐘 PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 🧑‍💻 pgAdmin for DB Management
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    networks:
      - web
      - internal
    depends_on:
      - postgres

  # 📊 Portainer Dashboard
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    networks:
      - web

  # 🛠 Background Processor
  processor:
    image: ${PROCESSER_IMAGE}
    restart: unless-stopped
    deploy:
      replicas: ${PROCESSER_REPLICAS:-1}
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=Production
      - RabbitMq__HOST=rabbitmq
      - RabbitMq__Username=${RABBITMQ_USER}
      - RabbitMq__Password=${RABBITMQ_PASS}
      - DOMAIN=${DOMAIN}
    networks:
      - internal
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

# =============================
# 🔄 Volumes & Networks
# =============================
volumes:
  postgres-data:
  portainer-data:

networks:
  web:
    driver: bridge
  internal:
    # This network is not accessible from outside
    internal: true