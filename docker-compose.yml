services:
  caddy:
    image: caddy:2
    container_name: caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - ACME_EMAIL=${TRAEFIK_ACME_EMAIL}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy-data:/data
      - caddy-config:/config
    networks:
      - digitalbot_web
    depends_on:
      - webapp
      - client-app
      - pgadmin
      - rabbitmq
      - redisinsight
      - portainer

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    networks:
      - digitalbot_web

  client-app:
    image: ${CLIENT_APP_IMAGE}
    container_name: ${COMPOSE_PROJECT_NAME}-client-app
    restart: unless-stopped
    networks:
      - digitalbot_web

  webapp:
    image: ${WEBAPP_IMAGE}
    container_name: ${COMPOSE_PROJECT_NAME}-app
    restart: unless-stopped
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=Production
      - RabbitMq__HOST=rabbitmq
      - RabbitMq__Username=${RABBITMQ_USER}
      - RabbitMq__Password=${RABBITMQ_PASSWORD}
      - Redis__Host=redis
      - Redis__Password=${REDIS_PASSWORD}
      - DOMAIN=${DOMAIN}
      - TelegramLogger__BotToken=${TELEGRAMLOGGER__BOTTOKEN}
      - TelegramLogger__ChatId=${TELEGRAMLOGGER__CHATID}
      - TelegramLogger__Topics__Default=${TELEGRAMLOGGER__TOPICS__DEFAULT},
      - TelegramLogger__Topics__Information= ${TELEGRAMLOGGER__TOPICS__INFORMATION},
      - TelegramLogger__Topics__Warning= ${TELEGRAMLOGGER__TOPICS__WARNING},
      - TelegramLogger__Topics__Error= ${TELEGRAMLOGGER__TOPICS__ERROR},
      - TelegramLogger__Topics__Critical= ${TELEGRAMLOGGER__TOPICS__CRITICAL},
      - TelegramLogger__Topics__Orders= ${TELEGRAMLOGGER__TOPICS__ORDERS},
      - TelegramLogger__Topics__Payments= ${TELEGRAMLOGGER__TOPICS__PAYMENTS}
    networks:
      - digitalbot_web
      - digitalbot_internal
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    networks:
      - digitalbot_internal
      - digitalbot_web
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 15s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - digitalbot_internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 6

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    networks:
      - digitalbot_web
      - digitalbot_internal

  processor:
    image: ${PROCESSOR_IMAGE}
    container_name: ${COMPOSE_PROJECT_NAME}-processor
    restart: unless-stopped
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=Production
      - RabbitMq__HOST=rabbitmq
      - RabbitMq__Username=${RABBITMQ_USER}
      - RabbitMq__Password=${RABBITMQ_PASSWORD}
      - Redis__Host=redis
      - Redis__Password=${REDIS_PASSWORD}
      - TelegramLogger__BotToken=${TELEGRAMLOGGER__BOTTOKEN}
      - TelegramLogger__ChatId=${TELEGRAMLOGGER__CHATID}
      - TelegramLogger__Topics__Default=${TELEGRAMLOGGER__TOPICS__DEFAULT},
      - TelegramLogger__Topics__Information= ${TELEGRAMLOGGER__TOPICS__INFORMATION},
      - TelegramLogger__Topics__Warning= ${TELEGRAMLOGGER__TOPICS__WARNING},
      - TelegramLogger__Topics__Error= ${TELEGRAMLOGGER__TOPICS__ERROR},
      - TelegramLogger__Topics__Critical= ${TELEGRAMLOGGER__TOPICS__CRITICAL},
      - TelegramLogger__Topics__Orders= ${TELEGRAMLOGGER__TOPICS__ORDERS},
      - TelegramLogger__Topics__Payments= ${TELEGRAMLOGGER__TOPICS__PAYMENTS}
    networks:
      - digitalbot_internal
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
        
  worker:    
    image: ${ORDER_WORKER_IMAGE}
    container_name: ${COMPOSE_PROJECT_NAME}-order-worker
    restart: unless-stopped
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=Production
      - RabbitMq__HOST=rabbitmq
      - RabbitMq__Username=${RABBITMQ_USER}
      - RabbitMq__Password=${RABBITMQ_PASSWORD}
      - Redis__Host=redis
      - Redis__Password=${REDIS_PASSWORD}
      - TelegramLogger__BotToken=${TELEGRAMLOGGER__BOTTOKEN}
      - TelegramLogger__ChatId=${TELEGRAMLOGGER__CHATID}
      - TelegramLogger__Topics__Default=${TELEGRAMLOGGER__TOPICS__DEFAULT},
      - TelegramLogger__Topics__Information= ${TELEGRAMLOGGER__TOPICS__INFORMATION},
      - TelegramLogger__Topics__Warning= ${TELEGRAMLOGGER__TOPICS__WARNING},
      - TelegramLogger__Topics__Error= ${TELEGRAMLOGGER__TOPICS__ERROR},
      - TelegramLogger__Topics__Critical= ${TELEGRAMLOGGER__TOPICS__CRITICAL},
      - TelegramLogger__Topics__Orders= ${TELEGRAMLOGGER__TOPICS__ORDERS},
      - TelegramLogger__Topics__Payments= ${TELEGRAMLOGGER__TOPICS__PAYMENTS}
    networks:
      - digitalbot_internal
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
             
  jobs:
    image: ${JOBS_IMAGE}
    container_name: ${COMPOSE_PROJECT_NAME}-jobs
    restart: unless-stopped
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=Production
      - RabbitMq__HOST=rabbitmq
      - RabbitMq__Username=${RABBITMQ_USER}
      - RabbitMq__Password=${RABBITMQ_PASSWORD}
      - Redis__Host=redis
      - Redis__Password=${REDIS_PASSWORD}
      - TelegramLogger__BotToken=${TELEGRAMLOGGER__BOTTOKEN}
      - TelegramLogger__ChatId=${TELEGRAMLOGGER__CHATID}
      - TelegramLogger__Topics__Default=${TELEGRAMLOGGER__TOPICS__DEFAULT},
      - TelegramLogger__Topics__Information= ${TELEGRAMLOGGER__TOPICS__INFORMATION},
      - TelegramLogger__Topics__Warning= ${TELEGRAMLOGGER__TOPICS__WARNING},
      - TelegramLogger__Topics__Error= ${TELEGRAMLOGGER__TOPICS__ERROR},
      - TelegramLogger__Topics__Critical= ${TELEGRAMLOGGER__TOPICS__CRITICAL},
      - TelegramLogger__Topics__Orders= ${TELEGRAMLOGGER__TOPICS__ORDERS},
      - TelegramLogger__Topics__Payments= ${TELEGRAMLOGGER__TOPICS__PAYMENTS}
    networks:
      - digitalbot_internal
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    networks:
      - digitalbot_internal
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    restart: unless-stopped
    networks:
      - digitalbot_web
      - digitalbot_internal

volumes:
  postgres-data:
  caddy-data:
  caddy-config:

networks:
  digitalbot_web: {}
  digitalbot_internal:
    driver: bridge
    internal: true
